---
version: "2"
services:
  nginx:
    image: nginx:1-alpine
    restart: always
    depends_on:
      app:
        condition: service_healthy
    environment:
      NGINX_PORT: "8080"
      ROOT_PATH: '/api'
      FRONTEND_PORT: 5173
    ports:
      - "8080:8080/tcp"
    volumes:
      - "./deploy/docker/nginx.template:/etc/nginx/templates/default.conf.template:ro"

  app:
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      # migrations:
      #   condition: service_completed_successfully
    build:
      context: .
      dockerfile: dev.dockerfile
    command: run
    healthcheck:
      test: 
        - CMD
        - curl
        - localhost:8080/health  
        - --fail
        - --silent
      interval: 10s
      timeout: 1s
      retries: 3
    environment: &environment
      APP__DATABASE_URL: "postgres://postgres:postgres@postgres:5432/postgres"
      APP__SOCKET: "0.0.0.0:8080"
      REDIS_HOST: redis
      APP__DEBUG: true
    ports:
      - "8082:8080/tcp"
    volumes:
      - ./crates:/app/crates:ro
      - ./src:/app/src:ro
      - ./target-dev:/app/target:rw
      - ./Cargo.lock:/app/Cargo.lock:ro
      - ./Cargo.toml:/app/Cargo.toml:ro
  
  # migrations:
  #   build:
  #     context: .
  #     dockerfile: dev.dockerfile
  #   command: migrate
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   environment: *environment
  #   volumes:
  #     - ./crates:/app/crates:ro
  #     - ./src:/app/src:ro
  #     - ./target-dev:/app/target:rw
  #     - ./Cargo.lock:/app/Cargo.lock:ro
  #     - ./Cargo.toml:/app/Cargo.toml:ro
  
  postgres:
    image: postgres:13-alpine
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432/tcp"
  
  redis:
    image: redis:6.2-alpine
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
